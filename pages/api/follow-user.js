import { createOrUpdateFile, getFileContent } from "@/lib/githubClient";

const USERS_DIR = "data/users"; // Dossier dans ton repo GitHub

export default async function handler(req, res) {
  if (req.method !== "POST") return res.status(405).json({ error: "MÃ©thode non autorisÃ©e" });

  const { authorId, followerId, followerName, followerEmail } = req.body;

  if (!authorId || !followerId)
    return res.status(400).json({ error: "Identifiants manquants" });

  const path = `${USERS_DIR}/${authorId}.json`;

  try {
    // ðŸ”¹ RÃ©cupÃ¨re le profil de lâ€™auteur sur GitHub
    let userData = {};
    try {
      const content = await getFileContent({ path });
      userData = JSON.parse(content);
    } catch {
      userData = { id: authorId, subscribers: [] };
    }

    if (!userData.subscribers) userData.subscribers = [];

    // ðŸ”¹ VÃ©rifie si lâ€™utilisateur suit dÃ©jÃ  lâ€™auteur
    const existing = userData.subscribers.find((s) => s.id === followerId);
    if (existing) {
      // DÃ©sabonnement
      userData.subscribers = userData.subscribers.filter((s) => s.id !== followerId);
    } else {
      // Abonnement
      userData.subscribers.push({
        id: followerId,
        name: followerName || "AbonnÃ©",
        email: followerEmail || "",
        date: new Date().toISOString(),
      });
    }

    // ðŸ”¹ Sauvegarde mise Ã  jour dans GitHub
    await createOrUpdateFile({
      path,
      content: JSON.stringify(userData, null, 2),
      message: existing
        ? `ðŸ”„ DÃ©sabonnement de ${followerName || "inconnu"}`
        : `âœ¨ Nouvel abonnÃ© : ${followerName || "inconnu"}`,
    });

    res.status(200).json({
      success: true,
      isFollowing: !existing,
      subscribersCount: userData.subscribers.length,
    });
  } catch (err) {
    console.error("Erreur follow GitHub:", err);
    res.status(500).json({ error: "Impossible de mettre Ã  jour l'abonnement." });
  }
}