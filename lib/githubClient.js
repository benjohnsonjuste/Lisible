const API_BASE = "https://api.github.com";
const OWNER = "benjohnsonjuste"; // ton nom d‚Äôutilisateur GitHub
const REPO = "Lisible";          // ton d√©p√¥t GitHub
const TOKEN = process.env.GITHUB_TOKEN; // cl√© perso stock√©e dans Vercel

// üõ†Ô∏è Cr√©e les en-t√™tes d‚Äôauthentification pour GitHub API
function getHeaders() {
  return {
    Authorization: `token ${TOKEN}`,
    Accept: "application/vnd.github+json",
    "Content-Type": "application/json",
  };
}

/**
 * üìÑ Cr√©e ou met √† jour un fichier sur GitHub
 * @param {string} path - Chemin du fichier (ex: 'public/data/texts/123.json')
 * @param {string} content - Contenu brut du fichier (non encod√©)
 * @param {string} message - Message du commit
 */
export async function createOrUpdateFile({ path, content, message }) {
  const url = `${API_BASE}/repos/${OWNER}/${REPO}/contents/${path}`;

  // V√©rifie si le fichier existe d√©j√† sur GitHub
  const getRes = await fetch(url, { headers: getHeaders() });
  const file = getRes.ok ? await getRes.json() : null;

  // Met √† jour ou cr√©e le fichier
  const res = await fetch(url, {
    method: "PUT",
    headers: getHeaders(),
    body: JSON.stringify({
      message,
      content: Buffer.from(content).toString("base64"), // encodage base64
      sha: file?.sha, // n√©cessaire si le fichier existe d√©j√†
      branch: "main",
    }),
  });

  if (!res.ok) {
    const text = await res.text();
    throw new Error(`Erreur GitHub: ${text}`);
  }

  return await res.json();
}

/**
 * üì• R√©cup√®re le contenu brut d‚Äôun fichier depuis GitHub
 * @param {string} path - Chemin du fichier (ex: 'public/data/texts/index.json')
 * @param {string} branch - Branche du repo (par d√©faut "main")
 * @returns {Promise<string>} - Contenu du fichier (texte brut)
 */
export async function getFileContent({ path, branch = "main" }) {
  const url = `${API_BASE}/repos/${OWNER}/${REPO}/contents/${path}?ref=${branch}`;
  const res = await fetch(url, { headers: getHeaders() });

  if (!res.ok) {
    const text = await res.text();
    throw new Error(`Impossible de r√©cup√©rer le fichier: ${text}`);
  }

  const data = await res.json();
  return Buffer.from(data.content, "base64").toString(); // d√©codage base64
}